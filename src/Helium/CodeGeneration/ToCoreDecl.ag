-- ------------------------------------------------------------------------
-- -- Declarations                                                       --
-- ------------------------------------------------------------------------

ATTR Declaration Declarations [ | patBindNr : Int | ]
ATTR MaybeDeclarations [ | | whereDeclarations : {[(Name, CoreDecl)]}]


ATTR Declaration Declarations MaybeDeclarations [ 
        
    |  
    |   functionNames USE {(++)} {[]}: {[Name]} 
        declNames USE {(++)} {[]}: {[Name]}
        collectDefaults USE {(++)} {[]} : {[(Name, CoreDecl)]}
    ]
        
SEM MaybeDeclarations [ | |   core : { Core.Expr -> Core.Expr } ]
    | Nothing     lhs.core = \continue -> continue
                  lhs.whereDeclarations = []
    | Just        declarations.patBindNr = 0
                  declarations.isTopLevel = False
                  declarations.moduleQual = internalError "ToCoreDecl.ag" "n/a" "toplevel MaybeDeclarations"
                  declarations.importEnv = @lhs.importEnv
                  lhs.whereDeclarations = zip @declarations.declNames @declarations.decls
                  lhs.core = \continue -> letrec_ @declarations.decls continue  

SEM Declaration        
    | Type              
        loc . qualrhs   = convertTypeToQualified @lhs.importEnv @type.self
            . (t1,t2s)  = convertFromSimpleTypeAndTypes @simpletype.self [@qualrhs]
            . t2        = head @t2s
            . allTypeVars = ftv [@t1, @t2]
            . (ts1,ts2)   = ( Quantification (@allTypeVars, [], [] .=>. @t1) :: TpScheme
                            , Quantification (@allTypeVars, [], [] .=>. @t2) :: TpScheme
                            )
            . typestring  = show @ts1 ++ " = " ++ show @ts2
            . origin      = originCustoms @lhs.modulename @range.self
            . qualname    = addQualified @lhs.moduleQual @simpletype.name

        lhs . decls  =
            let -- if we would have the collected type synonym information here, things could have been
                -- done much easier.
                (t1,[t2])   = convertFromSimpleTypeAndTypes @simpletype.self [@qualrhs]
                allTypeVars = ftv [t1,t2]
                (ts1,ts2)   = ( Quantification (allTypeVars, [], [] .=>. t1) :: TpScheme
                              , Quantification (allTypeVars, [], [] .=>. t2) :: TpScheme
                              )
            in
            [ Core.DeclCustom
                { Core.declName    = idFromString (getNameName @simpletype.name)
                , Core.declAccess  = Core.private
                , Core.declKind    = Core.DeclKindCustom (idFromString "typedecl")
                , Core.declCustoms =
                    [ Core.CustomBytes
                        (Byte.bytesFromString
                            (  show ts1
                            ++ " = "
                            ++ show ts2
                            )
                        )
                    , Core.CustomInt
                        (length @simpletype.typevariables)
                    ]
                    ++ @origin
                }
            ]
            ++
            [ DerivingShow.typeShowFunction @lhs.importEnv @self @lhs.moduleQual @origin ]
    
    | Data    constructors.tag = 0
              constructors.dataTypeName = @simpletype.name
              loc . origin      = originCustoms @lhs.modulename @range.self
                  . qualname    = addQualified @lhs.moduleQual @simpletype.name
                  . qualDers    = map (convertClassNameToQualified @lhs.importEnv) @derivings.self
              lhs.decls  =
        map snd @constructors.cons
        ++
        map (\n -> Core.DeclCustom
                    { Core.declName    = idFromString (getNameName n)
                    , Core.declAccess  = Core.private
                    , Core.declKind    = Core.DeclKindCustom (idFromString "data")
                    , Core.declCustoms = [ Core.CustomInt (length @simpletype.typevariables) ] ++ @origin})
            [@simpletype.name, @qualname]
        ++ 
        (if "Prelude.Show" `elem` map show @qualDers
         then [ DerivingShow.dataDictionary @lhs.importEnv @self @lhs.moduleQual @origin @qualname ]
         else []
        )
        ++
        (if "Prelude.Eq" `elem` map show @qualDers
         then [ DerivingEq.dataDictionary @lhs.importEnv @self @origin @qualname]
         else []
        )
        
    --  range                    : Range        
    --  context                  : ContextItems
    --  simpletype               : SimpleType
    --  constructors             : Constructors
    --  derivings                : Names
    
    | FunctionBindings  loc.ids            = freshIds "u$" @bindings.arity
                        bindings.ids       = @loc.ids
                        bindings.range     = @range.self
                        lhs.declNames = [@bindings.name]
                        loc.instanceDict = [idFromString $ "$instanceDict" ++ show name | Just name <- [@lhs.instanceName]]
                        loc . dictionaries = @instanceDict ++ (map predicateToId 
                                              (getPredicateForDecl @bindings.name @lhs.dictionaryEnv))
                            . qualname     = addQualified @lhs.moduleQual @bindings.name
                        lhs.decls    = map (\n ->
                                            Core.DeclValue
                                                { Core.declName    = idFromName n
                                                , Core.declAccess  = Core.private
                                                , Core.valueEnc    = Nothing
                                                , Core.valueValue  = foldr Core.Lam @bindings.core (@dictionaries ++ @ids)
                                                , Core.declCustoms = toplevelType @bindings.name @lhs.importEnv (@lhs.isTopLevel || isJust @lhs.instanceName) ++ originCustoms @lhs.modulename @range.self})
                                            $ @bindings.name : if @lhs.isTopLevel then [@qualname] else []
        
    --  range                    : Range          
    --  bindings                 : FunctionBindings -- should all be for the same function
    
    | PatternBinding    lhs.patBindNr = @lhs.patBindNr + 1
                        loc.dictionaries = 
                            case @pattern.self of
                                Pattern_Variable _ n ->
                                   map predicateToId 
                                      (getPredicateForDecl n @lhs.dictionaryEnv)
                                _ -> []                        
                        lhs.decls     =
        case @pattern.self of
            Pattern_Variable _ n -> map (\nn -> 
                  Core.DeclValue
                    { Core.declName    = idFromName nn
                    , Core.declAccess  = Core.private
                    , Core.valueEnc    = Nothing
                    , Core.valueValue  =  
                        foldr Core.Lam 
                            ( let_ -- because guards can fail
                                nextClauseId (patternMatchFail "pattern binding" @range.self)
                                @righthandside.core )
                            @dictionaries
                    , Core.declCustoms = toplevelType n @lhs.importEnv @lhs.isTopLevel ++ originCustoms @lhs.modulename @range.self
                    } ) $ n : if @lhs.isTopLevel then [addQualified @lhs.moduleQual n] else []
            _ -> Core.DeclValue
                    { Core.declName    = patBindId
                    , Core.declAccess  = Core.private
                    , Core.valueEnc    = Nothing
                    , Core.valueValue  = 
                        let_ 
                            nextClauseId (patternMatchFail "pattern binding" @range.self)
                            @righthandside.core
                    , Core.declCustoms = [custom "type" "patternbinding"] ++ originCustoms @lhs.modulename @range.self
                    }
                :
                [ Core.DeclValue
                    { Core.declName    = idFromName v
                    , Core.declAccess  = Core.private
                    , Core.valueEnc    = Nothing
                    , Core.valueValue  =
                        (let_ nextClauseId (patternMatchFail "pattern binding" @range.self)
                            (patternToCore (patBindId, @pattern.self) (Core.Var (idFromName v)))
                        )
                    , Core.declCustoms = toplevelType v @lhs.importEnv @lhs.isTopLevel ++ originCustoms @lhs.modulename @range.self
                    }
                | v1 <- @pattern.vars, let allv = v1 : if @lhs.isTopLevel then [addQualified @lhs.moduleQual v1] else [], v <- allv ]
                where 
                    patBindId = idFromString ("patBind$" ++ show @lhs.patBindNr)
    --  range                    : Range
    --  pattern                  : Pattern
    --  righthandside            : RightHandSide
    
    | TypeSignature         lhs.decls    = []
                            lhs.functionNames = @names.self    
    --  range                    : Range
    --  names                    : Names
    --  type                     : Type   -- may have context
    
    | Fixity            lhs.decls    =
        map
            ( ( \n ->
                Core.DeclCustom
                    { Core.declName    = idFromString n
                    , Core.declAccess  = Core.private
                    , Core.declKind    = (Core.DeclKindCustom . idFromString) "infix"
                    , Core.declCustoms =
                        [ Core.CustomInt 
                             ( case @priority.self of
                                  MaybeInt_Just i  -> i
                                  MaybeInt_Nothing -> 9 )
                        , (Core.CustomBytes . bytesFromString)
                              ( case @fixity.self of
                                   Fixity_Infixr _ -> "right"
                                   Fixity_Infixl _ -> "left"
                                   Fixity_Infix  _ -> "none"
                            --       _               -> internalError
                            --                            "ToCoreDecl.ag"
                            --                            "SEM Declaration.Fixity"
                            --                            "unknown fixity"
                              )
                        ] ++ originCustoms @lhs.modulename @range.self
                    }
              )
              . 
              getNameName
            )
            $ concatMap (\n -> [n, addQualified @lhs.moduleQual n]) @operators.self
    --  range                    : Range
    --  fixity                   : Fixity
    --  priority                 : MaybeInt
    --  operators                : Names
    | Class             loc . superClasses = getSuperClasses @contextQual
                            . contextQual  = map (convertContextItemToQualified @lhs.importEnv) @context.self
                            . qualName     = convertClassNameToQualified @lhs.importEnv @simpletype.name
                            . origin       = originCustoms @lhs.modulename @range.self
                        lhs.decls    = let 
                                            isInfix (Module.DeclCustom{
                                                Core.declKind = (Core.DeclKindCustom n)
                                            }) = stringFromId n `isSuffixOf` " infix"
                                            isInfix _ = False
                                        in (classFunctions @lhs.importEnv (getNameName @qualName) @origin $ constructFunctionMap @lhs.importEnv (length @superClasses) @qualName) ++ 
                                        [
                                            Core.DeclCustom
                                                {
                                                    --declName :: Id, declAccess :: !Access, declArity :: !Arity, declCustoms :: ![Custom]
                                                    Core.declName = idFromName @qualName,
                                                    Core.declAccess = Core.public,
                                                    Core.declKind = Core.DeclKindCustom $ idFromString "ClassDefinition",
                                                    Core.declCustoms =
                                                        constructClassMemberCustomDecl @lhs.importEnv @qualName (M.lookup @qualName $ classMemberEnvironment @lhs.importEnv) @origin
                                                        ++ @origin
                                                }
                                        ] ++ convertDictionaries @lhs.importEnv @qualName @where.functionNames @where.whereDeclarations 
                                         ++ (filter isInfix @where.decls)
                        where . instanceName = Just @qualName
                        where . dictionaryEnv = setCurrentClassNames (zip @where.functionNames (repeat ("$instanceDict" ++ show @qualName))) @lhs.dictionaryEnv
    | Instance          lhs .   decls    =  [ constructDictionary 
                                                @lhs.importEnv
                                                (getSuperClasses @contextQual)
                                                (constructFunctionMap @lhs.importEnv (length @superClasses) @qualName)
                                                @where.whereDeclarations 
                                                @qualName
                                                @loc.typeName (namesInType @loc.type)
                                                (originCustoms @lhs.modulename @range.self)
                                            ]
                        loc .   contextQual = map (convertContextItemToQualified @lhs.importEnv) @context.self
                        loc .   qualName    = convertClassNameToQualified @lhs.importEnv @name.self
                        loc .   typeName = showInstanceType $ convertTpToQualified @lhs.importEnv $ makeTpFromType @typevariables @type
                        loc .   err = error $ "Invalid class name " ++ getNameName @qualName
                        loc .   superClasses = fst (fromMaybe @err (M.lookup (getNameName @qualName) (classEnvironment @lhs.importEnv)))
                        loc .   typevariables = zip (namesInType @loc.type) [TVar n | n <- [0..]]
                        loc .   type = head @types.self
                        where . instanceName = Just @qualName
    
    -- Not supported
    
    | Newtype           lhs.decls    = internalError "ToCoreDecl" "Declaration" "'newType' not supported"
                        constructor.tag = 0
                        constructor.dataTypeName = @simpletype.name
    --  range                    : Range
    --  context                  : ContextItems
    --  simpletype               : SimpleType
    --  constructor              : Constructor  -- has only one field, no strictness
    --  derivings                : Names
    
    
    | Default           lhs.decls    = internalError "ToCoreDecl" "Declaration" "'default' not supported"
    --  range                    : Range
    --  types                    : Types        -- should be instances of Num
    
    | Empty             lhs.decls    = internalError "ToCoreDecl" "Declaration" "empty declarations not supported"
    --  range                    : Range

ATTR FunctionBinding FunctionBindings 
    [   ids : { [Id] }
    | 
    |   arity : Int
    ]

SEM FunctionBindings [ range : Range | | core : {Core.Expr}  ]
    | Cons             lhs.core  = @hd.core @tl.core
                          .arity = @hd.arity
    | Nil              lhs.core  = patternMatchFail "function bindings" @lhs.range
                          .arity = internalError "ToCoreDecl" "FunctionBindings" "arity: empty list of function bindings"

SEM FunctionBinding [ | | core : { Core.Expr -> Core.Expr } ]
    | Hole             lhs.arity = 0
                          . core = internalError "ToCoreDecl" "FunctionBinding" "holes not supported"
    | FunctionBinding  lhs.arity = @lefthandside.arity
                       lhs.core = 
        \nextClause ->
            let thisClause = 
                    patternsToCore 
                        (zip @lhs.ids @lefthandside.patterns)
                        @righthandside.core in
            if all patternAlwaysSucceeds @lefthandside.patterns 
               &&
               not @righthandside.isGuarded
            then
                thisClause
            else
                let_ nextClauseId nextClause thisClause
                                      
    --  range                    : Range
    --  lefthandside             : LeftHandSide
    --  righthandside            : RightHandSide
{
-- Get superclasses for contextitems. Result looks like [("Prelude.Eq", v0), ("Prelude.Num", v1)]
getSuperClasses ::  ContextItems -> [(String, Name)]
getSuperClasses = map (\(ContextItem_ContextItem _ n vs) -> (getNameName n, locVar vs))
    where
        locVar [vs] = name $ namesInType vs
        locVar _    =  error "Type variable not a single type"
        name [n]    = n
        name _      = error "Type variable not a single name"

predicateToId :: Predicate -> Id
predicateToId (Predicate class_ tp) =
    idFromString $ "$dict" ++ class_ ++ "$" ++ show tp
    
dictionaryTreeToCore :: DictionaryTree -> Core.Expr
dictionaryTreeToCore theTree =
   case theTree of
        ByPredicate predicate -> 
            Core.Var (predicateToId predicate)
        ByInstance className instanceName trees ->
            foldl Core.Ap
                (Core.Var (idFromString ("$dict"++className++ "$" ++ (instanceName))))
               (map dictionaryTreeToCore trees)
        BySuperClass subClass superClass tree -> 
            Core.Ap (Core.Var (idFromString ("$get" ++ superClass ++ "$" ++ subClass)))          
                 (dictionaryTreeToCore tree)
        ByCurrentClass className ->
            Core.Var (idFromString $ "$instanceDict" ++ className)
        BySuperInstance _ className typeVariables -> 
            Core.Var (idFromString $ "$instanceDict" ++ className ++ "$" ++ typeVariables )
    

insertDictionaries :: Name -> DictionaryEnvironment -> Core.Expr
insertDictionaries name dictionaryEnv = 
   foldl Core.Ap
         (Core.Var (idFromName name))
         ((map dictionaryTreeToCore (getDictionaryTrees name dictionaryEnv)))
}

ATTR LeftHandSide 
    [ 
    | 
    |   arity : Int
        patterns : Patterns
    ]

SEM LeftHandSide
    | Function         lhs.arity = @patterns.length
                          .patterns = @patterns.self
    --  range                    : Range
    --  name                     : Name
    --  patterns                 : Patterns

    | Infix            lhs.arity = 2
                          .patterns = [@leftPattern.self, @rightPattern.self ]
    --  range                    : Range
    --  leftPattern              : Pattern
    --  operator                 : Name
    --  rightPattern             : Pattern

    | Parenthesized    lhs.arity = @lefthandside.arity + @patterns.length
                          .patterns = @lefthandside.patterns ++ @patterns.self
    --  range                    : Range
    --  lefthandside             : LeftHandSide
    --  patterns                 : Patterns

SEM RightHandSide
    [ 
    | 
    |   core : { Core.Expr } 
        isGuarded : Bool
    ]

    | Expression        lhs.core = @where.core @expression.core
                            .isGuarded = False
                        where.instanceName = Nothing 
                        where.modulename = internalError "ToCoreDecl.ag" "RightHandSide.Expression - modulename" ""
    --  range                    : Range
    --  expression               : Expression
    --  where                    : MaybeDeclarations

    | Guarded         lhs.isGuarded = True
                         .core = @where.core (foldr ($) (Core.Var nextClauseId) @guardedexpressions.core)
                    where.instanceName = Nothing
                         
    --  range                    : Range
    --  guardedexpressions       : GuardedExpressions
    --  where                    : MaybeDeclarations

-- ------------------------------------------------------------------------
-- -- Types                                                              --
-- ------------------------------------------------------------------------

ATTR Constructors Constructor 
    [   tag : Int 
    | 
    |   cons USE { ++ } { [] } : { [(Id, CoreDecl)] } 
    ]

SEM Constructors [ dataTypeName : Name | | ]
    | Cons  hd.tag = @lhs.tag
            tl.tag = @lhs.tag + 1

SEM Constructor [ dataTypeName : Name | | ]
    | Constructor       
        loc.qualname = @lhs.dataTypeName
        lhs.cons = map (\n ->
                        (idFromName n, Core.DeclCon
                            { Core.declName    = idFromName n
                            , Core.declAccess  = Core.private
                            , Core.declArity   = @types.length
                            , Core.conTag      = @lhs.tag
                            , Core.declCustoms = constructorCustoms 
                                                    @qualname
                                                    @constructor.self 
                                                    (valueConstructors @lhs.importEnv)
                                                ++ originCustoms @lhs.modulename @range.self
                            }
                        ) ) [@constructor.self, addQualified @lhs.moduleQual @constructor.self]
    --  range                    : Range
    --  constructor              : Name
    --  types                    : AnnotatedTypes
    
    | Infix             
        loc.qualname = @lhs.dataTypeName --addQualified (getQualifiedFromString @lhs.modulename) @lhs.dataTypeName
        lhs.cons = map (\n ->
                        (idFromName n, Core.DeclCon
                            { Core.declName    = idFromName n
                            , Core.declAccess  = Core.private
                            , Core.declArity   = 2
                            , Core.conTag      = @lhs.tag
                            , Core.declCustoms = constructorCustoms
                                                    @qualname
                                                    @constructorOperator.self 
                                                    (valueConstructors @lhs.importEnv)
                                                ++ originCustoms @lhs.modulename @range.self
                            }
                        ) ) [@constructorOperator.self, addQualified @lhs.moduleQual @constructorOperator.self]
            
    --  range                    : Range
    --  leftType                 : AnnotatedType
    --  constructorOperator      : Name
    --  rightType                : AnnotatedType
    
-- Not supported

    | Record            lhs.cons = internalError "ToCoreDecl" "Constructor" "records not supported"
    --  range                    : Range
    --  constructor              : Name
    --  fieldDeclarations        : FieldDeclarations

SEM AnnotatedTypes [ | | length : Int ]
    | Cons lhs.length = 1 + @tl.length
    | Nil  lhs.length = 0

{
constructorCustoms :: Name -> Name -> ValueConstructorEnvironment -> [Core.Custom]
constructorCustoms dataTypeName name envWithParent =
    maybe 
        (internalError "ToCoreDecl" "Constructor" ("no type found for " ++ show name))
        (\tpScheme -> 
            [ custom "type" (show tpScheme)
            , Core.CustomLink 
                    (idFromName dataTypeName) 
                    (Core.DeclKindCustom (idFromString "data"))
            ]
        )
        (M.lookup name env)
    where
        env = M.map (\(_, scheme) -> scheme) envWithParent

originCustoms :: String -> Range -> [Core.Custom]
originCustoms origin range = [Core.CustomDecl (Core.DeclKindCustom (idFromString "origin")) [Core.CustomName (idFromString (origin ++ ":" ++ showFullRange range))] ]
}
